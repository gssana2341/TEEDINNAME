const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// Load environment variables
function loadEnvFile() {
  const envPath = path.join(process.cwd(), '.env.local')
  const envVars = {}
  
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf8')
    envContent.split('\n').forEach(line => {
      const [key, value] = line.split('=')
      if (key && value) {
        envVars[key.trim()] = value.trim()
      }
    })
  }
  
  return envVars
}

const envVars = loadEnvFile()
const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL
const serviceRoleKey = envVars.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !serviceRoleKey) {
  console.error('тЭМ Missing environment variables')
  console.log('Required: NEXT_PUBLIC_SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, serviceRoleKey, {
  auth: { autoRefreshToken: false, persistSession: false }
})

async function fixAllAgentProblems() {
  console.log('ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓р╕гр╕░р╕Ър╕Ъ Agent р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф...\n')

  try {
    // 1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╕кр╕гр╣Йр╕▓р╕З Storage Bucket
    console.log('ЁЯУБ 1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Storage Bucket "agent-documents"...')
    
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets()
    
    if (bucketsError) {
      console.error('тЭМ Error listing buckets:', bucketsError.message)
      return
    }
    
    const agentDocsBucket = buckets.find(bucket => bucket.id === 'agent-documents')
    
    if (!agentDocsBucket) {
      console.log('тЪая╕П Creating agent-documents bucket...')
      
      const { data: createBucketData, error: createBucketError } = await supabase
        .storage
        .createBucket('agent-documents', {
          public: false,
          allowedMimeTypes: ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg'],
          fileSizeLimit: 10485760 // 10MB
        })

      if (createBucketError) {
        console.error('тЭМ Error creating bucket:', createBucketError.message)
        console.log('ЁЯТб р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕▒р╕Щ SQL script: setup-storage.sql р╣Гр╕Щ Supabase Dashboard')
      } else {
        console.log('тЬЕ Bucket "agent-documents" created successfully')
      }
    } else {
      console.log('тЬЕ Bucket "agent-documents" already exists')
    }

    // 2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Storage Policies
    console.log('\nЁЯФР 2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Storage Policies...')
    
    // р╕кр╕гр╣Йр╕▓р╕З policies (р╕Ир╕░ ignore error р╕Цр╣Йр╕▓р╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Бр╕ер╣Йр╕з)
    const policies = [
      {
        name: 'Authenticated users can upload agent documents',
        sql: `
          CREATE POLICY "Authenticated users can upload agent documents" ON storage.objects
          FOR INSERT WITH CHECK (
            bucket_id = 'agent-documents' AND
            auth.role() = 'authenticated'
          );
        `
      },
      {
        name: 'Users can view their own agent documents',
        sql: `
          CREATE POLICY "Users can view their own agent documents" ON storage.objects
          FOR SELECT USING (
            bucket_id = 'agent-documents' AND
            auth.uid()::text = (storage.foldername(name))[1]
          );
        `
      },
      {
        name: 'Users can delete their own agent documents',
        sql: `
          CREATE POLICY "Users can delete their own agent documents" ON storage.objects
          FOR DELETE USING (
            bucket_id = 'agent-documents' AND
            auth.uid()::text = (storage.foldername(name))[1]
          );
        `
      }
    ]

    for (const policy of policies) {
      try {
        await supabase.rpc('exec', { sql: policy.sql })
        console.log(`тЬЕ Policy "${policy.name}" created/exists`)
      } catch (error) {
        console.log(`тД╣я╕П Policy "${policy.name}" may already exist`)
      }
    }

    // 3. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╣Бр╕Бр╣Йр╣Др╕В role р╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕гр╣Бр╕ер╣Йр╕з
    console.log('\nЁЯСе 3. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Бр╕ер╕░р╣Бр╕Бр╣Йр╣Др╕В role р╕Вр╕нр╕Зр╕Ьр╕╣р╣Йр╣Гр╕Кр╣Й...')
    
    const { data: agentUsers, error: agentError } = await supabase
      .from('agens')
      .select('user_id')
    
    if (agentError) {
      console.error('тЭМ Error fetching agents:', agentError.message)
    } else {
      console.log(`ЁЯУЛ р╕Юр╕Ър╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕г agent р╕Ир╕│р╕Щр╕зр╕Щ: ${agentUsers.length} р╕Др╕Щ`)
      
      let updatedCount = 0
      
      for (const agent of agentUsers) {
        // р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ role р╕Ыр╕▒р╕Ир╕Ир╕╕р╕Ър╕▒р╕Щ
        const { data: currentUser, error: fetchError } = await supabase
          .from('users')
          .select('id, role')
          .eq('id', agent.user_id)
          .single()
          
        if (fetchError) {
          console.error(`тЭМ Error fetching user ${agent.user_id}:`, fetchError.message)
          continue
        }
        
        if (currentUser.role !== 'agent') {
          console.log(`ЁЯФД Updating role for user ${agent.user_id} from "${currentUser.role}" to "agent"`)
          
          const { error: updateError } = await supabase
            .from('users')
            .update({ 
              role: 'agent',
              updated_at: new Date().toISOString()
            })
            .eq('id', agent.user_id)
            
          if (updateError) {
            console.error(`тЭМ Error updating user ${agent.user_id}:`, updateError.message)
          } else {
            console.log(`тЬЕ Updated role for user ${agent.user_id}`)
            updatedCount++
          }
        } else {
          console.log(`тД╣я╕П User ${agent.user_id} already has role "agent"`)
        }
      }
      
      console.log(`ЁЯУК р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х role р╕кр╕│р╣Ар╕гр╣Зр╕И: ${updatedCount}/${agentUsers.length} р╕Др╕Щ`)
    }

    // 4. р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ Storage
    console.log('\nЁЯУД 4. р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ Storage...')
    
    const testFile = Buffer.from('Test PDF content for agent system')
    const testFileName = `test/${Date.now()}-test.pdf`
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('agent-documents')
      .upload(testFileName, testFile, {
        contentType: 'application/pdf'
      })
      
    if (uploadError) {
      console.error('тЭМ Storage upload test failed:', uploadError.message)
      console.log('ЁЯТб р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ Storage Policies р╣Гр╕Щ Supabase Dashboard')
    } else {
      console.log('тЬЕ Storage upload test successful')
      
      // р╕ер╕Ър╣Др╕Яр╕ер╣Мр╕Чр╕Фр╕кр╕нр╕Ъ
      await supabase.storage
        .from('agent-documents')
        .remove([testFileName])
      console.log('ЁЯЧСя╕П Test file cleaned up')
    }

    // 5. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ verification_documents р╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е
    console.log('\nЁЯЧДя╕П 5. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ verification_documents р╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е...')
    
    const { data: agentsWithDocs, error: docsError } = await supabase
      .from('agens')
      .select('user_id, verification_documents')
      .not('verification_documents', 'eq', '[]')
    
    if (docsError) {
      console.error('тЭМ Error fetching agent documents:', docsError.message)
    } else {
      console.log(`ЁЯУЛ р╕Юр╕Ъ agent р╕Чр╕╡р╣Ир╕бр╕╡р╣Ар╕нр╕Бр╕кр╕▓р╕г: ${agentsWithDocs.length} р╕Др╕Щ`)
      
      agentsWithDocs.forEach(agent => {
        const docs = agent.verification_documents
        if (Array.isArray(docs) && docs.length > 0) {
          console.log(`ЁЯУД Agent ${agent.user_id}: ${docs.length} р╣Ар╕нр╕Бр╕кр╕▓р╕г`)
          docs.forEach((doc, index) => {
            console.log(`   - Document ${index + 1}: ${typeof doc === 'string' ? doc : JSON.stringify(doc)}`)
          })
        }
      })
    }

    // 6. р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В
    console.log('\nЁЯОЙ р╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щ!')
    console.log('\nЁЯУЛ р╕кр╕гр╕╕р╕Ыр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В:')
    console.log('тЬЕ 1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ/р╕кр╕гр╣Йр╕▓р╕З Storage Bucket "agent-documents"')
    console.log('тЬЕ 2. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ/р╕кр╕гр╣Йр╕▓р╕З Storage Policies р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕нр╕▒р╕Ыр╣Вр╕лр╕ер╕Фр╣Др╕Яр╕ер╣М')
    console.log('тЬЕ 3. р╕нр╕▒р╕Ыр╣Ар╕Фр╕Х role р╕Ир╕▓р╕Б "customer" р╣Ар╕Ыр╣Зр╕Щ "agent" р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ьр╕╣р╣Йр╕Чр╕╡р╣Ир╕кр╕бр╕▒р╕Др╕гр╣Бр╕ер╣Йр╕з')
    console.log('тЬЕ 4. р╕Чр╕Фр╕кр╕нр╕Ър╕гр╕░р╕Ър╕Ъ Storage')
    console.log('тЬЕ 5. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╣Ар╕нр╕Бр╕кр╕▓р╕гр╕Чр╕╡р╣Ир╕бр╕╡р╕нр╕вр╕╣р╣Ир╣Гр╕Щр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е')
    
    console.log('\nЁЯТб р╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕Вр╕Ыр╕▒р╕Нр╕лр╕▓р╕Ыр╕╕р╣Ир╕б Agent:')
    console.log('   - р╕Ыр╕╕р╣Ир╕б Agent р╕Ир╕░р╕лр╕▓р╕вр╣Др╕Ыр╣Ар╕бр╕╖р╣Ир╕н userRole === "agent"')
    console.log('   - р╕лр╕ер╕▒р╕Зр╕Ир╕▓р╕Бр╕кр╕бр╕▒р╕Др╕гр╕кр╕│р╣Ар╕гр╣Зр╕И р╕гр╕░р╕Ър╕Ър╕Ир╕░р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕лр╕Щр╣Йр╕▓р╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕▒р╕Ыр╣Ар╕Фр╕Х auth context')
    console.log('   - р╕Цр╣Йр╕▓р╕Ыр╕╕р╣Ир╕бр╕вр╕▒р╕Зр╣Др╕бр╣Ир╕лр╕▓р╕вр╣Др╕Ы р╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕╡р╣Ар╕Яр╕гр╕Кр╕лр╕Щр╣Йр╕▓р╣Ар╕зр╣Зр╕Ър╕Фр╣Йр╕зр╕вр╕Хр╕▒р╕зр╣Ар╕нр╕З')
    
    console.log('\nЁЯФД р╕лр╕▓р╕Бр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓:')
    console.log('   1. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ .env.local р╕зр╣Ир╕▓р╕бр╕╡ SUPABASE keys р╕Др╕гр╕Ъ')
    console.log('   2. р╕гр╕▒р╕Щ setup-storage.sql р╣Гр╕Щ Supabase Dashboard')
    console.log('   3. р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ RLS policies р╣Гр╕Щ Storage')

  } catch (error) {
    console.error('тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╣Бр╕Бр╣Йр╣Др╕В:', error.message)
  }
}

// Run the fix
fixAllAgentProblems()
