"use client"

import { useState, useEffect } from "react"
import { X, Eye, EyeOff } from "lucide-react"
import Image from "next/image"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { toast } from "@/hooks/use-toast"
import { TermsModal } from "@/components/terms-modal"
import { supabase } from "@/lib/supabase"
import { useAuth } from "@/contexts/auth-context"

interface AgentRegisterModalProps {
  isOpen: boolean
  onClose: () => void
}

export function AgentRegisterModal({ isOpen, onClose }: AgentRegisterModalProps) {  const [isLoading, setIsLoading] = useState(false)
  const [currentStep, setCurrentStep] = useState(1)
  const [isEditing, setIsEditing] = useState(false)
  const [errors, setErrors] = useState<{ [key: string]: string }>({})
  const [showTermsModal, setShowTermsModal] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [showConfirmPassword, setShowConfirmPassword] = useState(false)
  const { user } = useAuth()

  const [formData, setFormData] = useState({
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß/‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    profileImage: null as File | null,
    firstName: "",
    lastName: "",
    email: "",
    phone: "",
    password: "",
    confirmPassword: "",
    address: "",
    addressMore: "",
    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û
    companyName: "",
    agentLicenseId: "",
    nationalId: "",
    officeAddress: "",
    propertyTypes: [] as string[],
    serviceArea: "",
    currentAddress: "",
    businessLicenseId: "",
    // ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ
    agentLicenseFile: null as File | null,
    businessLicenseFile: null as File | null,
    idCardFile: null as File | null,
    // ‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    acceptTerms: false,
  })  // Effect to fetch user data when modal opens
  useEffect(() => {
    const fetchUserData = async () => {
      if (isOpen && user) {
        try {
          console.log('üîÑ Fetching user data for agent registration...', user.id)
          
          // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å users table ‡∏Å‡πà‡∏≠‡∏ô
          const { data: userData, error } = await supabase
            .from('users')
            .select('*')
            .eq('id', user.id)
            .single()

          if (error) {
            console.log('‚ö†Ô∏è Error from users table, trying email lookup:', error)
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏î‡πâ‡∏ß‡∏¢ id ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ email
            const { data: userByEmail, error: emailError } = await supabase
              .from('users')
              .select('*')
              .eq('email', user.email)
              .single()
            
            if (emailError) {
              throw emailError
            }
            
            if (userByEmail) {
              console.log('‚úÖ User data found by email:', userByEmail)
              setFormData(prev => ({
                ...prev,
                firstName: userByEmail.first_name || "",
                lastName: userByEmail.last_name || "",
                email: userByEmail.email || "",
                phone: userByEmail.phone || "",
                address: userByEmail.address || "",
              }))
            }
          } else if (userData) {
            console.log('‚úÖ User data fetched successfully by ID:', userData)
            setFormData(prev => ({
              ...prev,
              firstName: userData.first_name || "",
              lastName: userData.last_name || "",
              email: userData.email || "",
              phone: userData.phone || "",
              address: userData.address || "",
            }))
          }
          
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô users table ‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å auth user
          if (!userData) {
            console.log('üìã Using auth user data as fallback:', user)
            setFormData(prev => ({
              ...prev,
              firstName: user.user_metadata?.first_name || "",
              lastName: user.user_metadata?.last_name || "",
              email: user.email || "",
              phone: user.user_metadata?.phone || "",
            }))
          }
        } catch (error) {
          console.error('‚ùå Error fetching user data:', error)
          
          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å auth user ‡πÄ‡∏õ‡πá‡∏ô fallback
          console.log('üìã Using auth user data as fallback after error:', user)
          setFormData(prev => ({
            ...prev,
            firstName: user.user_metadata?.first_name || "",
            lastName: user.user_metadata?.last_name || "",
            email: user.email || "",
            phone: user.user_metadata?.phone || "",
          }))
          
          toast({
            variant: "destructive",
            title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
            description: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á"
          })
        }
      } else {
        console.log('‚ö†Ô∏è Modal not open or user not available:', { isOpen, user: !!user })
      }
    }

    fetchUserData()
  }, [isOpen, user])
  // Effect to handle modal open/close
  useEffect(() => {
    if (isOpen) {
      setShowTermsModal(!formData.acceptTerms)
      setCurrentStep(1)
      setErrors({})
      // ‡πÑ‡∏°‡πà reset formData ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà fetch ‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á‡πÑ‡∏î‡πâ
    }
  }, [isOpen, formData.acceptTerms])
  const validateStep1 = () => {
    const newErrors: { [key: string]: string } = {}
    
    if (!formData.firstName.trim()) {
      newErrors.firstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠'
    }
    if (!formData.lastName.trim()) {
      newErrors.lastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•'
    }
    if (!formData.email.trim()) {
      newErrors.email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•'
    }
    if (!formData.phone.trim()) {
      newErrors.phone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£'
    }
    // ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô optional ‡πÅ‡∏ï‡πà‡∏ñ‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    if (formData.password.trim() && formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô'
    }
    if (!formData.acceptTerms) {
      newErrors.acceptTerms = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }
  const validateStep2 = () => {
    const newErrors: { [key: string]: string } = {}
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ * ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (!formData.businessLicenseId.trim()) {
      newErrors.businessLicenseId = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'
    } else if (!/^\d{13}$/.test(formData.businessLicenseId.trim())) {
      newErrors.businessLicenseId = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (13 ‡∏´‡∏•‡∏±‡∏Å)'
    }
    
    if (!formData.currentAddress.trim()) {
      newErrors.currentAddress = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'
    }
    
    if (formData.propertyTypes.length === 0) {
      newErrors.propertyTypes = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó'
    }
    
    if (!formData.serviceArea.trim()) {
      newErrors.serviceArea = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'
    }
    
    if (!formData.businessLicenseFile) {
      newErrors.businessLicenseFile = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô'
    }

    setErrors(newErrors)
    return Object.keys(newErrors).length === 0
  }
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsLoading(true)

    try {
      if (!user) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ')
      }      console.log('üöÄ Starting agent registration process...', {
        userId: user.id,
        email: user.email
      })

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
      if (!formData.firstName.trim() || !formData.lastName.trim() || 
          !formData.email.trim() || !formData.phone.trim() ||
          !formData.businessLicenseId.trim() || !formData.currentAddress.trim() ||
          formData.propertyTypes.length === 0 || !formData.serviceArea.trim()) {
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
      if (!/^\d{13}$/.test(formData.businessLicenseId.trim())) {
        throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (13 ‡∏´‡∏•‡∏±‡∏Å)')
      }      // 1. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
      let documentUrls: string[] = []
      
      if (formData.businessLicenseFile) {
        console.log('üìÑ Uploading verification document...')
        const fileName = `${user.id}/verification_${Date.now()}.pdf`
        
        const { data: uploadData, error: uploadError } = await supabase.storage
          .from('agent-documents')
          .upload(fileName, formData.businessLicenseFile)
        
        if (uploadError) {
          console.error('‚ùå File upload error:', uploadError)
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ: ' + uploadError.message)
        }
        
        // ‡πÑ‡∏î‡πâ URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        const { data: urlData } = supabase.storage
          .from('agent-documents')
          .getPublicUrl(fileName)
        
        documentUrls.push(urlData.publicUrl)
        console.log('‚úÖ Document uploaded successfully:', urlData.publicUrl)
      }

      // 2. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á agents
      const agentData = {
        user_id: user.id,
        company_name: formData.companyName || null,
        license_number: formData.agentLicenseId || null,
        business_license_id: formData.businessLicenseId,
        address: formData.currentAddress,
        national_id: formData.businessLicenseId, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        property_types: JSON.stringify(formData.propertyTypes),
        service_areas: JSON.stringify([formData.serviceArea]),
        verification_documents: JSON.stringify(documentUrls), // ‡πÄ‡∏Å‡πá‡∏ö URL ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        status: 'pending'
      }      console.log('üìù Prepared agent data:', agentData)

      // 3. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
      const userUpdateData: any = {
        first_name: formData.firstName,
        last_name: formData.lastName,
        phone: formData.phone,
        updated_at: new Date().toISOString()
      }

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      if (formData.password.trim()) {
        console.log('üîê Updating user password...')
        const { error: passwordError } = await supabase.auth.updateUser({
          password: formData.password
        })
        
        if (passwordError) {
          console.error('‚ùå Password update error:', passwordError)
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + passwordError.message)
        }
        console.log('‚úÖ Password updated successfully')
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
      console.log('üìù Updating user data...')
      const { error: userUpdateError } = await supabase
        .from('users')
        .update(userUpdateData)
        .eq('id', user.id)

      if (userUpdateError) {
        console.error('‚ùå User update error:', userUpdateError)
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ' + userUpdateError.message)
      }
      console.log('‚úÖ User data updated successfully')

      // 4. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      console.log('üóëÔ∏è Removing customer record if exists...')
      const { error: deleteCustomerError } = await supabase
        .from('customers')
        .delete()
        .eq('user_id', user.id)

      if (deleteCustomerError) {
        console.warn('‚ö†Ô∏è Customer delete warning (may not exist):', deleteCustomerError)
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customers table
      } else {
        console.log('‚úÖ Customer record removed successfully')
      }

      // 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens
      console.log('‚ûï Creating agent record...')
      const { error: agentInsertError } = await supabase
        .from('agens') // ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
        .insert(agentData)

      if (agentInsertError) {
        console.error('‚ùå Agent insert error:', agentInsertError)
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Agent ‡πÑ‡∏î‡πâ: ' + agentInsertError.message)
      }
      console.log('‚úÖ Agent record created successfully')

      // 6. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏à‡∏≤‡∏Å customer ‡πÄ‡∏õ‡πá‡∏ô agent (‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!)
      console.log('üîÑ Updating user role to agent...')
      const { error: roleUpdateError } = await supabase
        .from('users')
        .update({ 
          role: 'agent',
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id)

      if (roleUpdateError) {
        console.error('‚ùå Role update error:', roleUpdateError)
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Role ‡πÑ‡∏î‡πâ: ' + roleUpdateError.message)
      }
      console.log('‚úÖ User role updated to agent successfully')

      // 7. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      toast({
        title: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô‡πÑ‡∏°‡πà‡∏ä‡πâ‡∏≤",
      })

      console.log('üéâ Agent registration completed successfully!')
        // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ auth context ‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° Agent ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      setTimeout(() => {
        window.location.reload()
      }, 2000)

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
      if (formData.password.trim()) {
        console.log('üîê Updating user password...')
        const { error: passwordError } = await supabase.auth.updateUser({
          password: formData.password
        })
        
        if (passwordError) {
          console.error('‚ùå Password update error:', passwordError)
          throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ: ' + passwordError.message)
        }
        console.log('‚úÖ Password updated successfully')
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
      console.log('üìù Updating user data...')
      const { error: userUpdateError } = await supabase
        .from('users')
        .update(userUpdateData)
        .eq('id', user.id)

      if (userUpdateError) {
        console.error('‚ùå User update error:', userUpdateError)
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: ' + userUpdateError.message)
      }
      console.log('‚úÖ User data updated successfully')

      // 3. ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      console.log('üóëÔ∏è Removing customer record...')
      const { error: deleteCustomerError } = await supabase
        .from('customers')
        .delete()
        .eq('user_id', user.id)

      if (deleteCustomerError) {
        console.warn('‚ö†Ô∏è Customer delete warning (may not exist):', deleteCustomerError)
        // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô customers table
      } else {
        console.log('‚úÖ Customer record removed successfully')
      }

      // 4. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agents
      console.log('‚ûï Creating agent record...')
      const { error: agentInsertError } = await supabase
        .from('agens') // ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤
        .insert(agentData)

      if (agentInsertError) {
        console.error('‚ùå Agent insert error:', agentInsertError)
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Agent ‡πÑ‡∏î‡πâ: ' + agentInsertError.message)
      }
      console.log('‚úÖ Agent record created successfully')

      // 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á users ‡∏à‡∏≤‡∏Å customer ‡πÄ‡∏õ‡πá‡∏ô agent
      console.log('üîÑ Updating user role to agent...')
      const { error: roleUpdateError } = await supabase
        .from('users')
        .update({ 
          role: 'agent',
          updated_at: new Date().toISOString()
        })
        .eq('id', user.id)

      if (roleUpdateError) {
        console.error('‚ùå Role update error:', roleUpdateError)
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Role ‡πÑ‡∏î‡πâ: ' + roleUpdateError.message)
      }
      console.log('‚úÖ User role updated to agent successfully')

      // 6. ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      toast({
        title: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Agent ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!",
        description: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß",
      })

      console.log('üéâ Agent registration completed successfully!')
      
      // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ auth context ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
      setTimeout(() => {
        window.location.reload()
      }, 1500)
      
      onClose()
    } catch (error) {
      console.error('‚ùå Registration error:', error)
      toast({
        variant: "destructive",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        description: error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Agent ‡πÑ‡∏î‡πâ"
      })
    } finally {
      setIsLoading(false)
    }
  }
  const handleNextStep = () => {
    let isValid = false
    
    if (currentStep === 1) {
      isValid = validateStep1()
    } else if (currentStep === 2) {
      isValid = validateStep2()
    }

    if (!isValid) {
      toast({
        variant: "destructive",
        title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ * ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"
      })
      return
    }

    setCurrentStep(currentStep + 1)
    setErrors({})
  }

  if (!isOpen) return null

  const steps = [
    { label: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß", number: 1 },
    { label: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", number: 2 },
    { label: "‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", number: 3 },
  ]

  return (
    <>
      <TermsModal
        isOpen={showTermsModal}
        onAccept={() => {
          setShowTermsModal(false);
          setFormData({ ...formData, acceptTerms: true });
        }}
        onClose={() => {
          setShowTermsModal(false);
          onClose(); // Close both modals
        }}
        fromAgent={true}
      />

      {/* Only show the rest of the modal if terms are accepted */}
      {!showTermsModal && (
        <>
          {/* Overlay */}
          <div className="fixed inset-0 bg-black/50 z-50" onClick={onClose} />          {/* Modal */}
          <div className="fixed inset-y-0 right-0 w-full sm:w-[500px] bg-gradient-to-br from-white via-gray-50 to-blue-50 backdrop-blur-sm z-[60] overflow-y-auto shadow-2xl">
            {/* Header with back button */}
            <div className="sticky top-0 bg-white/90 backdrop-blur-md z-10 px-6 py-4 border-b border-gray-200">              <div className="flex items-center">
                <button 
                  onClick={onClose} 
                  className="text-gray-600 hover:text-gray-800 p-2 rounded-full hover:bg-white/60 transition-all duration-200"
                  aria-label="Close modal"
                  type="button"
                >
                  <X size={24} />
                </button>
                
              </div>
              <h2 className="text-2xl font-semibold text-center mt-6 mb-8 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Agent</h2>

              {/* Progress Steps */}
              <div className="relative flex justify-between items-center mb-8">
                {steps.map((step, index) => (
                  <div key={index} className="relative flex flex-col items-center flex-1">
                    {/* Step Circle */}                    <div
                      className={`w-10 h-10 rounded-full flex items-center justify-center relative z-10 border-2 transition-all duration-200
                        ${currentStep >= step.number ? "bg-gradient-to-r from-blue-600 to-purple-600 border-blue-600 shadow-lg" : "bg-white border-gray-300"}`}
                    >
                      <div className={`w-3 h-3 rounded-full transition-all duration-200 ${currentStep >= step.number ? "bg-white" : "bg-gray-300"}`} />
                    </div>

                    {/* Step Label */}
                    <span
                      className={`mt-2 text-xs text-center ${currentStep >= step.number ? "text-blue-600" : "text-gray-400"}`}
                    >
                      {step.label}
                    </span>                    {/* Connector Line */}
                    {index < steps.length - 1 && (
                      <div
                        className={`absolute top-4 left-1/2 w-full h-[2px] -translate-y-1/2 -translate-x-1/2
                          ${currentStep > step.number ? "bg-blue-600" : "bg-gray-200"}`}
                      />
                    )}
                  </div>
                ))}
              </div>
            </div>

            {/* Form Content */}
            <div className="p-6">
              {currentStep === 1 && (
                <div className="space-y-6">                  {/* Profile Image Upload */}
                  <div className="text-center">
                    <div className="text-sm text-gray-600 mb-2">‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</div>
                    <div className="w-24 h-24 mx-auto mb-4 relative">
                      <div className="w-full h-full rounded-full bg-gray-100 flex items-center justify-center overflow-hidden">
                        {formData.profileImage ? (
                          <Image
                            src={URL.createObjectURL(formData.profileImage)}
                            alt="Profile preview"
                            width={96}
                            height={96}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                        )}
                      </div>

                      {/* Upload button */}
                      <input
                        type="file"
                        accept="image/*"
                        onChange={(e) => {
                          const file = e.target.files?.[0]
                          if (file) {
                            setFormData({ ...formData, profileImage: file })
                          }
                        }}
                        className="hidden"
                        id="profile-image-upload"
                        aria-label="Upload profile image"
                      />
                      <label
                        htmlFor="profile-image-upload"
                        className="absolute bottom-0 right-0 bg-gradient-to-r from-blue-600 to-purple-600 text-white p-2 rounded-full cursor-pointer hover:from-blue-700 hover:to-purple-700 transition-all duration-200 shadow-lg"
                      >
                        <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" />
                        </svg>
                      </label>

                      {/* Delete button - shown only when image exists */}
                      {formData.profileImage && (
                        <button
                          type="button"
                          onClick={() => setFormData({ ...formData, profileImage: null })}
                          className="absolute top-0 left-0 bg-red-500 text-white p-1.5 rounded-full cursor-pointer hover:bg-red-600 transition-all duration-200 shadow-lg"
                          aria-label="Delete profile image"
                        >
                          <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                          </svg>
                        </button>
                      )}
                    </div>
                  </div>

                  {/* Personal Information */}
                  <div className="space-y-6">                    <div>
                      <label htmlFor="firstName" className="text-sm text-gray-600 mb-2 block">‡∏ä‡∏∑‡πà‡∏≠ *</label>
                      <Input
                        id="firstName"
                        value={formData.firstName}
                        onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"
                        className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                        required
                      />
                      {errors.firstName && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.firstName}</div>}
                    </div>                    <div>
                      <label htmlFor="lastName" className="text-sm text-gray-600 mb-2 block">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
                      <Input
                        id="lastName"
                        value={formData.lastName}
                        onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                        className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                        required
                      />
                      {errors.lastName && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.lastName}</div>}
                    </div>                    <div>
                      <label htmlFor="email" className="text-sm text-gray-600 mb-2 block">‡∏≠‡∏µ‡πÄ‡∏°‡∏• *</label>
                      <Input
                        id="email"
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        placeholder="Example@email.com"
                        className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                        required
                      />
                      {errors.email && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.email}</div>}
                    </div>                    <div>
                      <label htmlFor="phone" className="text-sm text-gray-600 mb-2 block">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ *</label>
                      <Input
                        id="phone"
                        value={formData.phone}
                        onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                        placeholder="081-111-1111"
                        className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                        required
                      />
                      {errors.phone && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.phone}</div>}
                    </div>                    <div>
                      <label htmlFor="password" className="text-sm text-gray-600 mb-2 block">
                        ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                        <span className="text-xs text-gray-500 block mt-1">‡∏´‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ô‡∏µ‡πâ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô</span>
                      </label>
                      <div className="relative">                        <Input
                          id="password"
                          type={showPassword ? "text" : "password"}
                          value={formData.password}
                          onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                          placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                          className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200 pr-12"
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-blue-600 transition-colors duration-200"
                          aria-label={showPassword ? "Hide password" : "Show password"}
                        >
                          {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                        </button>
                      </div>
                      {errors.password && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.password}</div>}
                    </div>                    <div>
                      <label htmlFor="confirmPassword" className="text-sm text-gray-600 mb-2 block">
                        ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
                        <span className="text-xs text-gray-500 block mt-1">‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</span>
                      </label>
                      <div className="relative">                        <Input
                          id="confirmPassword"
                          type={showConfirmPassword ? "text" : "password"}
                          value={formData.confirmPassword}
                          onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                          placeholder="‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)"
                          className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200 pr-12"
                        />
                        <button
                          type="button"
                          onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-blue-600 transition-colors duration-200"
                          aria-label={showConfirmPassword ? "Hide confirm password" : "Show confirm password"}
                        >
                          {showConfirmPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                        </button>
                      </div>
                      {errors.confirmPassword && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.confirmPassword}</div>}
                    </div>
                    <div className="text-xs text-gray-500">*‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á</div>
                  </div>

                  {/* Terms and Conditions */}
                  <div className="flex items-start space-x-3 mt-4">
                    <input
                      type="checkbox"
                      id="terms"
                      checked={formData.acceptTerms}
                      onChange={(e) => setFormData({ ...formData, acceptTerms: e.target.checked })}
                      className="mt-1"
                    />
                    <label htmlFor="terms" className="text-sm text-gray-600">
                      ‡∏â‡∏±‡∏ô‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö{" "}
                      <a href="#" className="text-blue-600 hover:underline">
                        ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á
                      </a>{" "}
                      ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
                    </label>
                  </div>
                </div>
              )}              {currentStep === 2 && (
                <div className="space-y-6">                  <div>
                    <label htmlFor="companyName" className="text-sm text-gray-600 mb-2 block">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                    <Input
                      id="companyName"
                      value={formData.companyName}
                      onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
                      className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                    />
                  </div>                  <div>
                    <label htmlFor="agentLicenseId" className="text-sm text-gray-600 mb-2 block">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ô‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</label>
                    <Input
                      id="agentLicenseId"
                      value={formData.agentLicenseId}
                      onChange={(e) => setFormData({ ...formData, agentLicenseId: e.target.value })}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï"
                      className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                    />
                  </div>                  <div>
                    <label htmlFor="nationalId" className="text-sm text-gray-600 mb-2 block">
                      ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô <span className="text-red-500">*</span>
                    </label>
                    <Input
                      id="nationalId"
                      value={formData.businessLicenseId}
                      onChange={(e) => setFormData({ ...formData, businessLicenseId: e.target.value })}
                      placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                      className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                      required
                    />
                    {errors.businessLicenseId && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.businessLicenseId}</div>}
                  </div>                  <div>
                    <label htmlFor="officeAddress" className="text-sm text-gray-600 mb-2 block">
                      ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠) <span className="text-red-500">*</span>
                    </label>
                    <Input
                      id="officeAddress"
                      value={formData.currentAddress}
                      onChange={(e) => setFormData({ ...formData, currentAddress: e.target.value })}
                      placeholder="‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏"
                      className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                      required
                    />
                    {errors.currentAddress && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.currentAddress}</div>}
                  </div>{" "}                  <div>
                    <div className="text-sm text-gray-600 mb-2">
                      ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏• (‡∏Ç‡∏≤‡∏¢/‡πÄ‡∏ä‡πà‡∏≤/‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•) <span className="text-red-500">*</span>
                    </div>
                    <div className="space-y-2 p-4 bg-white/80 backdrop-blur-sm border-2 border-gray-200 rounded-xl shadow-sm hover:shadow-md transition-all duration-200">
                      {[
                        { value: "sell", label: "‡∏Ç‡∏≤‡∏¢" },
                        { value: "rent", label: "‡πÄ‡∏ä‡πà‡∏≤" },
                        { value: "auction", label: "‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•" }
                      ].map((option) => (
                        <label key={option.value} className="flex items-center gap-3 p-2 rounded-lg hover:bg-blue-50 transition-colors duration-200 cursor-pointer">
                          <input
                            type="checkbox"
                            checked={formData.propertyTypes.includes(option.value)}
                            onChange={(e) => {
                              const newTypes = e.target.checked
                                ? [...formData.propertyTypes, option.value]
                                : formData.propertyTypes.filter(t => t !== option.value);
                              setFormData({ ...formData, propertyTypes: newTypes });
                            }}
                            className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500 focus:ring-2"
                          />
                          <span className="text-gray-900 font-medium">{option.label}</span>
                        </label>
                      ))}
                    </div>
                    {errors.propertyTypes && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.propertyTypes}</div>}
                  </div>                  <div>
                    <label htmlFor="serviceArea" className="text-sm text-gray-600 mb-2 block">
                      ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠) <span className="text-red-500">*</span>
                    </label>
                    <Input
                      id="serviceArea"
                      value={formData.serviceArea}
                      onChange={(e) => setFormData({ ...formData, serviceArea: e.target.value })}
                      placeholder="‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
                      className="h-12 bg-white/80 backdrop-blur-sm border-2 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm hover:shadow-md transition-all duration-200"
                      required
                    />
                    {errors.serviceArea && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.serviceArea}</div>}
                  </div>
                  <div>
                    <div className="text-sm text-gray-600 mb-2">
                      ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô/‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó) ‡πÑ‡∏ü‡∏•‡πå PDF <span className="text-red-500">*</span>
                    </div>
                    <div className="bg-white/80 backdrop-blur-sm border-2 border-dashed border-gray-300 hover:border-blue-400 rounded-xl p-6 text-center transition-all duration-200 cursor-pointer hover:bg-blue-50/50">                      <input
                        type="file"
                        accept=".pdf"
                        onChange={(e) => {
                          const file = e.target.files?.[0]
                          if (file) {
                            setFormData({ ...formData, businessLicenseFile: file })
                          }
                        }}
                        className="hidden"
                        id="identity-document-upload"
                        aria-label="Upload identity document PDF"
                      />
                      <label htmlFor="identity-document-upload" className="cursor-pointer">
                        <div className="flex flex-col items-center">
                          <svg className="w-8 h-8 text-gray-400 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                          </svg>
                          <span className="text-sm text-gray-600">‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF</span>
                          {formData.businessLicenseFile && (
                            <span className="text-sm text-blue-600 mt-1 font-medium">{formData.businessLicenseFile.name}</span>
                          )}
                        </div>
                      </label>
                    </div>                    {errors.businessLicenseFile && <div className="text-red-500 text-sm mt-1 bg-red-50 p-2 rounded-lg border border-red-200">{errors.businessLicenseFile}</div>}
                  </div>
                </div>
              )}

              {currentStep === 3 && (
                <div className="space-y-6">                  <div className="text-center mb-6">
                    <div className="text-sm text-gray-600 mb-4">‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</div>                    <div className="w-20 h-20 mx-auto mb-4 relative">
                      <div className="w-full h-full rounded-full bg-gray-100 flex items-center justify-center overflow-hidden">
                        {formData.profileImage ? (
                          <Image
                            src={URL.createObjectURL(formData.profileImage)}
                            alt="Profile preview"
                            width={80}
                            height={80}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                          </svg>
                        )}
                      </div>
                      {isEditing && (
                        <>
                          {/* Upload button */}
                          <input
                            type="file"
                            accept="image/*"
                            onChange={(e) => {
                              const file = e.target.files?.[0]
                              if (file) {
                                setFormData({ ...formData, profileImage: file })
                              }
                            }}
                            className="hidden"
                            id="profile-image-upload-step3"
                            aria-label="Upload profile image for step 3"
                          />
                          <label
                            htmlFor="profile-image-upload-step3"
                            className="absolute bottom-0 right-0 bg-blue-600 text-white p-2 rounded-full cursor-pointer hover:bg-blue-700 transition-colors"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M12 4v16m8-8H4" />
                            </svg>
                          </label>

                          {/* Delete button - shown only when image exists */}
                          {formData.profileImage && (
                            <button
                              type="button"
                              onClick={() => setFormData({ ...formData, profileImage: null })}
                              className="absolute top-0 left-0 bg-red-500 text-white p-1.5 rounded-full cursor-pointer hover:bg-red-600 transition-all duration-200 shadow-lg"
                              aria-label="Delete profile image"
                            >
                              <svg className="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            </button>
                          )}
                        </>
                      )}
                    </div>
                  </div>                  {/* Summary of all information */}
                  <div className="space-y-4">
                    <div>
                      <div className="text-sm text-gray-600 mb-2">‡∏ä‡∏∑‡πà‡∏≠</div>
                      <Input
                        value={formData.firstName}
                        onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"
                        className={`h-12 bg-white/80 backdrop-blur-sm border-2 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm transition-all duration-200 ${
                          isEditing 
                            ? "border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 hover:shadow-md" 
                            : "border-gray-200 bg-gray-50/50"
                        }`}
                        disabled={!isEditing}
                      />
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</div>
                      <Input
                        value={formData.lastName}
                        onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                        className={`h-12 bg-white/80 backdrop-blur-sm border-2 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm transition-all duration-200 ${
                          isEditing 
                            ? "border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 hover:shadow-md" 
                            : "border-gray-200 bg-gray-50/50"
                        }`}
                        disabled={!isEditing}
                      />
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">‡∏≠‡∏µ‡πÄ‡∏°‡∏•</div>
                      <Input
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        placeholder="Example@email.com"
                        className={`h-12 bg-white/80 backdrop-blur-sm border-2 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm transition-all duration-200 ${
                          isEditing 
                            ? "border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 hover:shadow-md" 
                            : "border-gray-200 bg-gray-50/50"
                        }`}
                        disabled={!isEditing}
                      />
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</div>
                      <Input
                        value={formData.phone}
                        onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                        placeholder="081-111-1111"
                        className={`h-12 bg-white/80 backdrop-blur-sm border-2 rounded-xl text-gray-900 placeholder:text-gray-400 shadow-sm transition-all duration-200 ${
                          isEditing 
                            ? "border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 hover:shadow-md" 
                            : "border-gray-200 bg-gray-50/50"
                        }`}
                        disabled={!isEditing}
                      />
                    </div><div>
                      <div className="text-sm text-gray-600 mb-2">‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</div>
                      <div className="relative">
                        <Input
                          type={showPassword ? "text" : "password"}
                          value={formData.password}
                          onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                          placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
                          className="h-12 bg-white border-gray-300 text-gray-900 pr-12"
                          disabled={!isEditing}
                        />
                        <button
                          type="button"
                          onClick={() => setShowPassword(!showPassword)}
                          className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700"
                          disabled={!isEditing}
                        >
                          {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                        </button>
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</div>
                      <Input
                        value={formData.companyName}
                        onChange={(e) => setFormData({ ...formData, companyName: e.target.value })}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó"
                        className="h-12 bg-white border-gray-300 text-gray-900"
                        disabled={!isEditing}
                      />
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ô‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)</div>
                      <Input
                        value={formData.agentLicenseId}
                        onChange={(e) => setFormData({ ...formData, agentLicenseId: e.target.value })}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï"
                        className="h-12 bg-white border-gray-300 text-gray-900"
                        disabled={!isEditing}
                      />
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">
                        ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô <span className="text-red-500">*</span>
                      </div>
                      <Input
                        value={formData.businessLicenseId}
                        onChange={(e) => setFormData({ ...formData, businessLicenseId: e.target.value })}
                        placeholder="‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
                        className="h-12 bg-white border-gray-300 text-gray-900"
                        disabled={!isEditing}
                      />
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">
                        ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠) <span className="text-red-500">*</span>
                      </div>
                      <Input
                        value={formData.currentAddress}
                        onChange={(e) => setFormData({ ...formData, currentAddress: e.target.value })}
                        placeholder="‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏"
                        className="h-12 bg-white border-gray-300 text-gray-900"
                        disabled={!isEditing}
                      />
                    </div>{" "}                <div>
                      <div className="text-sm text-gray-600 mb-2">
                        ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏™‡∏±‡∏á‡∏´‡∏≤‡∏£‡∏¥‡∏°‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏• (‡∏Ç‡∏≤‡∏¢/‡πÄ‡∏ä‡πà‡∏≤/‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•) <span className="text-red-500">*</span>
                      </div>
                      <div className="space-y-2 p-3 border border-gray-300 rounded-md bg-white">
                        {[
                          { value: "sell", label: "‡∏Ç‡∏≤‡∏¢" },
                          { value: "rent", label: "‡πÄ‡∏ä‡πà‡∏≤" },
                          { value: "auction", label: "‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•" }
                        ].map((option) => (
                          <label key={option.value} className="flex items-center gap-2">
                            <input
                              type="checkbox"
                              checked={formData.propertyTypes.includes(option.value)}
                              onChange={(e) => {
                                const newTypes = e.target.checked
                                  ? [...formData.propertyTypes, option.value]
                                  : formData.propertyTypes.filter(t => t !== option.value);
                                setFormData({ ...formData, propertyTypes: newTypes });
                              }}
                              disabled={!isEditing}
                              className="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            />
                            <span className={`${!isEditing ? 'text-gray-500' : 'text-gray-900'}`}>{option.label}</span>
                          </label>
                        ))}
                      </div>
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">
                        ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠) <span className="text-red-500">*</span>
                      </div>
                      <Input
                        value={formData.serviceArea}
                        onChange={(e) => setFormData({ ...formData, serviceArea: e.target.value })}
                        placeholder="‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î/‡∏≠‡∏≥‡πÄ‡∏†‡∏≠"
                        className="h-12 bg-white border-gray-300 text-gray-900"
                        disabled={!isEditing}
                      />
                    </div>
                    <div>
                      <div className="text-sm text-gray-600 mb-2">
                        ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô (‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô/‡πÉ‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï/‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó) ‡πÑ‡∏ü‡∏•‡πå PDF <span className="text-red-500">*</span>
                      </div>
                      <div className="border border-gray-200 rounded-lg p-3 bg-gray-50">                        <input
                          type="file"
                          accept=".pdf"
                          onChange={(e) => {
                            const file = e.target.files?.[0]
                            if (file) {
                              setFormData({ ...formData, businessLicenseFile: file })
                            }
                          }}
                          className="hidden"
                          id="identity-document-upload-step3"
                          disabled={!isEditing}
                          aria-label="Upload identity document PDF for step 3"
                        />
                        <label
                          htmlFor="identity-document-upload-step3"
                          className={`cursor-pointer text-gray-500 text-sm ${!isEditing ? "pointer-events-none" : ""}`}
                        >
                          {formData.businessLicenseFile ? formData.businessLicenseFile.name : "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF"}
                        </label>
                      </div>
                    </div>

                    {/* Terms and Conditions Confirmation */}
                    <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                      <div className="flex items-start space-x-3">
                        <input 
                          type="checkbox"
                          id="terms-confirmation"
                          checked={formData.acceptTerms}
                          onChange={(e) => setFormData({ ...formData, acceptTerms: e.target.checked })}
                          className="mt-1"
                          disabled={!isEditing}
                        />
                        <label htmlFor="terms-confirmation" className="text-sm text-gray-600">
                          ‡∏â‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö{" "}
                          <a href="#" className="text-blue-600 hover:underline">
                            ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á
                          </a>{" "}
                          ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
                        </label>
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Navigation Buttons */}
              <div className="mt-8 space-y-4">            <Button
                  className="w-full h-12 bg-blue-600 hover:bg-blue-700 text-white"
                  onClick={() => {
                    if (currentStep < 3) {
                      // For step 2, validate required fields before proceeding
                      if (currentStep === 2) {
                        if (!validateStep2()) {
                          toast({
                            variant: "destructive",
                            title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
                            description: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ * ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"
                          })
                          return;
                        }
                      }
                      setCurrentStep(currentStep + 1)                    } else {
                      if (isEditing) {
                        setIsEditing(false)
                      } else {
                        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ handleSubmit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏à‡∏£‡∏¥‡∏á
                        handleSubmit(new Event('submit') as any)
                      }
                    }
                  }}
                  disabled={isLoading}
                >
                  {currentStep === 3 ? (isEditing ? "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" : "‡∏¢‡∏±‡∏ô‡∏¢‡∏±‡∏ô") : "‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"}
                </Button>
                {currentStep > 1 && (
                  <Button
                    className="w-full h-12 bg-white hover:bg-gray-50 text-blue-600 border border-blue-600"
                    onClick={() => {
                      if (currentStep === 3) {
                        setIsEditing(!isEditing)
                      } else {
                        setCurrentStep(currentStep - 1)
                      }
                    }}
                    disabled={isLoading}
                  >
                    {currentStep === 3 ? "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" : "‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö"}
                  </Button>
                )}
              </div>
            </div>
          </div>
        </>
      )}
    </>
  )
}
