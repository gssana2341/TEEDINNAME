const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");
const path = require("path");

// Read environment variables from .env.local
function loadEnvFile() {
  const envPath = path.join(process.cwd(), ".env.local");
  if (!fs.existsSync(envPath)) {
    console.error("‚ùå .env.local file not found");
    process.exit(1);
  }

  const envContent = fs.readFileSync(envPath, "utf8");
  const envVars = {};

  envContent.split("\n").forEach((line) => {
    const trimmedLine = line.trim();
    if (trimmedLine && !trimmedLine.startsWith("#")) {
      const [key, ...valueParts] = trimmedLine.split("=");
      if (key && valueParts.length > 0) {
        envVars[key.trim()] = valueParts.join("=").trim();
      }
    }
  });

  return envVars;
}

// Load environment variables
const envVars = loadEnvFile();
const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = envVars.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error("‚ùå Missing required environment variables");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
});

async function testAgentRegistrationProcess() {
  console.log("üß™ Testing Agent Registration Process...\n");

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens
    console.log("1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens...");
    const { data: agensStructure, error: structureError } = await supabase
      .from("agens")
      .select("*")
      .limit(1);

    if (
      structureError &&
      structureError.message.includes('relation "agens" does not exist')
    ) {
      console.log("‚ùå ‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á - ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô");
      return;
    } else if (structureError) {
      console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens:", structureError.message);
    } else {
      console.log("‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    }

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers
    console.log("\n2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers...");
    const { data: customersStructure, error: customersError } = await supabase
      .from("customers")
      .select("*")
      .limit(1);

    if (
      customersError &&
      customersError.message.includes('relation "customers" does not exist')
    ) {
      console.log("‚ö†Ô∏è ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡πÑ‡∏°‡πà‡∏°‡∏µ - ‡∏à‡∏∞‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö");
    } else if (customersError) {
      console.log("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers:", customersError.message);
    } else {
      console.log("‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á customers ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
    console.log("\n3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á users...");
    const { data: usersData, error: usersError } = await supabase
      .from("users")
      .select("id, email, role, first_name, last_name")
      .eq("role", "customer")
      .limit(3);

    if (usersError) {
      console.log("‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á users:", usersError.message);
      return;
    }

    console.log("‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô customer:", usersData.length, "‡∏Ñ‡∏ô");
    if (usersData.length > 0) {
      console.log("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:");
      usersData.forEach((user) => {
        console.log(
          `- ${user.first_name} ${user.last_name} (${user.email}) - Role: ${user.role}`
        );
      });
    }

    // 4. ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£ Agent
    if (usersData.length > 0) {
      const testUser = usersData[0];
      console.log(
        `\n4. ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÄ‡∏õ‡πá‡∏ô Agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${testUser.email}`
      );

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Agent
      const mockAgentData = {
        user_id: testUser.id,
        company_name: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏à‡∏≥‡∏Å‡∏±‡∏î",
        license_number: "AG001234",
        business_license_id: "1234567890123",
        address: "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10110",
        national_id: "1234567890123",
        property_types: JSON.stringify(["sell", "rent"]),
        service_areas: JSON.stringify(["‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø", "‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ"]),
        verification_documents: JSON.stringify([]),
        status: "pending",
      };

      console.log("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens:");
      console.log(JSON.stringify(mockAgentData, null, 2));

      // *** ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ß‡∏±‡∏á: ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö ***
      console.log(
        "\n‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"
      );
      console.log("   ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
    }

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log("\n5. ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö:");

    const systemStatus = {
      agensTable: !structureError,
      customersTable: !customersError,
      usersTable: !usersError,
      testUsers: usersData.length > 0,
    };

    console.log("üìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:");
    Object.entries(systemStatus).forEach(([key, status]) => {
      console.log(
        `${status ? "‚úÖ" : "‚ùå"} ${key}: ${status ? "‡∏û‡∏£‡πâ‡∏≠‡∏°" : "‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"}`
      );
    });

    const allReady = Object.values(systemStatus).every((status) => status);
    console.log(
      `\n${allReady ? "üéâ" : "‚ö†Ô∏è"} ‡∏£‡∏∞‡∏ö‡∏ö Agent Registration ${
        allReady ? "‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô" : "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°"
      }`
    );
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:", error.message);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
async function createAgensTableIfNotExists() {
  console.log("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens...");

  const createTableSQL = `
    CREATE TABLE IF NOT EXISTS public.agens (
      user_id uuid NOT NULL,
      company_name character varying NULL,
      license_number character varying NULL,
      business_license_id character varying NULL,
      address text NULL,
      property_types jsonb NOT NULL,
      service_areas jsonb NOT NULL,
      verification_documents jsonb NULL DEFAULT '[]'::jsonb,
      status character varying NULL DEFAULT 'pending'::character varying,
      created_at timestamp without time zone NULL DEFAULT now(),
      updated_at timestamp without time zone NULL DEFAULT now(),
      national_id character varying(13) NULL,
      CONSTRAINT agens_pkey PRIMARY KEY (user_id),
      CONSTRAINT agens_user_id_fkey FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
      CONSTRAINT agens_business_license_id_check CHECK (
        (business_license_id IS NULL) OR (length(business_license_id::text) >= 3)
      ),
      CONSTRAINT agens_status_check CHECK (
        status::text = ANY (ARRAY[
          'pending'::character varying::text,
          'approved'::character varying::text,
          'rejected'::character varying::text
        ])
      )
    );
  `;

  try {
    const { error } = await supabase.rpc("execute_sql", {
      sql: createTableSQL,
    });
    if (error) {
      console.log("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÑ‡∏î‡πâ:", error.message);
      console.log("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡πÉ‡∏ô Supabase Dashboard");
    } else {
      console.log("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    }
  } catch (error) {
    console.log(
      "üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens ‡πÉ‡∏ô Supabase Dashboard ‡∏î‡πâ‡∏ß‡∏¢ SQL ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:"
    );
    console.log(createTableSQL);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function main() {
  await testAgentRegistrationProcess();

  console.log("\n" + "=".repeat(60));
  console.log("‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á agens ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ:");
  console.log("node test-agent-registration.js create-table");
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö argument
if (process.argv.includes("create-table")) {
  createAgensTableIfNotExists();
} else {
  main();
}
