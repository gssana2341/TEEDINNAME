import nodemailer from 'nodemailer'
import { sendOTPEmail as sendResendOTP } from './resend-email'

export interface EmailConfig {
  host: string
  port: number
  secure: boolean
  auth: {
    user: string
    pass: string
  }
}

// р╕Бр╕│р╕лр╕Щр╕Фр╕Др╣Ир╕▓р╣Ар╕гр╕┤р╣Ир╕бр╕Хр╣Йр╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ъ Gmail
const defaultConfig: EmailConfig = {
  host: process.env.SMTP_HOST || 'smtp.gmail.com',
  port: parseInt(process.env.SMTP_PORT || '587'),
  secure: process.env.SMTP_SECURE === 'true',
  auth: {
    user: process.env.SMTP_USER || '',
    pass: process.env.SMTP_PASS || ''
  }
}

// р╕кр╕гр╣Йр╕▓р╕З transporter р╕кр╕│р╕лр╕гр╕▒р╕Ър╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е
export const createEmailTransporter = (config: EmailConfig = defaultConfig) => {
  return nodemailer.createTransport(config)
}

// р╕кр╕гр╣Йр╕▓р╕З HTML template р╕кр╕│р╕лр╕гр╕▒р╕Ъ OTP
const createEmailTemplate = (otpCode: string): string => {
  return `
    <div style="font-family: 'Noto Sans Thai', Arial, sans-serif; max-width: 600px; margin: 0 auto; background-color: #f8fafc; padding: 20px;">
      <div style="background-color: white; padding: 40px; border-radius: 12px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
        <!-- Header -->
        <div style="text-align: center; margin-bottom: 30px;">
          <h1 style="color: #1e40af; font-size: 28px; font-weight: bold; margin: 0;">TedInEasy</h1>
          <p style="color: #64748b; font-size: 16px; margin: 8px 0 0 0;">р╕гр╕░р╕Ър╕Ър╕нр╕кр╕▒р╕Зр╕лр╕▓р╕гр╕┤р╕бр╕Чр╕гр╕▒р╕Юр╕вр╣М</p>
        </div>

        <!-- Main Content -->
        <div style="text-align: center; margin-bottom: 30px;">
          <h2 style="color: #1e293b; font-size: 24px; font-weight: bold; margin-bottom: 16px;">
            ЁЯФР р╕гр╕лр╕▒р╕к OTP р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ
          </h2>
          <p style="color: #475569; font-size: 16px; line-height: 1.6; margin-bottom: 30px;">
            р╣Ар╕гр╕▓р╣Др╕Фр╣Йр╕гр╕▒р╕Ър╕Др╕│р╕Вр╕нр╣Гр╕лр╣Йр╕Чр╕│р╕Бр╕▓р╕гр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Ър╕▒р╕Нр╕Кр╕╡р╕Вр╕нр╕Зр╕Др╕╕р╕У<br>
            р╕Бр╕гр╕╕р╕Ур╕▓р╣Гр╕Кр╣Йр╕гр╕лр╕▒р╕к OTP р╕Фр╣Йр╕▓р╕Щр╕ер╣Ир╕▓р╕Зр╣Ар╕Юр╕╖р╣Ир╕нр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Хр╕▒р╕зр╕Хр╕Щ
          </p>

          <!-- OTP Code -->
          <div style="background: linear-gradient(135deg, #3b82f6 0%, #1e40af 100%); color: white; font-size: 32px; font-weight: bold; padding: 20px 40px; border-radius: 12px; letter-spacing: 8px; margin: 30px 0; display: inline-block;">
            ${otpCode}
          </div>

          <p style="color: #ef4444; font-size: 14px; font-weight: 500; margin-top: 20px;">
            тЪая╕П р╕гр╕лр╕▒р╕кр╕Щр╕╡р╣Йр╕Ир╕░р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Гр╕Щр╣Ар╕зр╕ер╕▓ 5 р╕Щр╕▓р╕Чр╕╡
          </p>
        </div>

        <!-- Security Notice -->
        <div style="background-color: #fef3c7; border: 1px solid #f59e0b; border-radius: 8px; padding: 16px; margin-bottom: 20px;">
          <h3 style="color: #92400e; font-size: 16px; font-weight: bold; margin: 0 0 8px 0;">
            ЁЯЫбя╕П р╣Ар╕Юр╕╖р╣Ир╕нр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в
          </h3>
          <ul style="color: #78350f; font-size: 14px; margin: 0; padding-left: 20px;">
            <li>р╣Др╕бр╣Ир╕Др╕зр╕гр╣Бр╕Кр╕гр╣Мр╕гр╕лр╕▒р╕кр╕Щр╕╡р╣Йр╕Бр╕▒р╕Ър╕Ьр╕╣р╣Йр╕нр╕╖р╣Ир╕Щ</li>
            <li>р╕лр╕▓р╕Бр╕Др╕╕р╕Ур╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Чр╕│р╕Бр╕▓р╕гр╕Вр╕нр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Чр╕╡р╕бр╕Зр╕▓р╕Щр╕Чр╕▒р╕Щр╕Чр╕╡</li>
            <li>р╕гр╕лр╕▒р╕кр╕Щр╕╡р╣Йр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Кр╣Йр╣Др╕Фр╣Йр╣Ар╕Юр╕╡р╕вр╕Зр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з</li>
          </ul>
        </div>

        <!-- Footer -->
        <div style="text-align: center; border-top: 1px solid #e2e8f0; padding-top: 20px;">
          <p style="color: #64748b; font-size: 14px; margin: 0;">
            р╕нр╕╡р╣Ар╕бр╕ер╕Щр╕╡р╣Йр╕кр╣Ир╕Зр╕Ир╕▓р╕Бр╕гр╕░р╕Ър╕Ър╕нр╕▒р╕Хр╣Вр╕Щр╕бр╕▒р╕Хр╕┤ р╕Бр╕гр╕╕р╕Ур╕▓р╕нр╕вр╣Ир╕▓р╕Хр╕нр╕Ър╕Бр╕ер╕▒р╕Ъ<br>
            р╕лр╕▓р╕Бр╕бр╕╡р╕Ыр╕▒р╕Нр╕лр╕▓ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╣Ир╕н: support@tedin.com
          </p>
          <p style="color: #94a3b8; font-size: 12px; margin: 10px 0 0 0;">
            ┬й 2025 TedInEasy. р╕кр╕Зр╕зр╕Щр╕ер╕┤р╕Вр╕кр╕┤р╕Чр╕Шр╕┤р╣М
          </p>
        </div>
      </div>
    </div>
  `
}

// р╕кр╣Ир╕З OTP р╕Ьр╣Ир╕▓р╕Щр╕нр╕╡р╣Ар╕бр╕е - р╣Гр╕Кр╣Й Gmail SMTP р╣Ар╕Ыр╣Зр╕Щр╕лр╕ер╕▒р╕Б (р╕кр╣Ир╕Зр╣Др╕Фр╣Йр╕Чр╕╕р╕Бр╕нр╕╡р╣Ар╕бр╕е)
export const sendOTPEmail = async (
  to: string, 
  otpCode: string, 
  config?: EmailConfig
): Promise<{ success: boolean; error?: string; provider?: string }> => {
  console.log('ЁЯЪА р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е OTP...')

  // р╕ер╕│р╕Фр╕▒р╕Ър╕Чр╕╡р╣И 1: р╣Гр╕Кр╣Й Gmail SMTP (р╕кр╣Ир╕Зр╣Др╕Фр╣Йр╕Чр╕╕р╕Бр╕нр╕╡р╣Ар╕бр╕е)
  if (process.env.SMTP_USER && process.env.SMTP_PASS) {
    try {
      console.log('ЁЯУз р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е OTP р╕Ьр╣Ир╕▓р╕Щ Gmail SMTP...')
      const transporter = createEmailTransporter(config)
      
      const mailOptions = {
        from: {
          name: 'TedInEasy - р╕гр╕░р╕Ър╕Ър╕нр╕кр╕▒р╕Зр╕лр╕▓р╕гр╕┤р╕бр╕Чр╕гр╕▒р╕Юр╕вр╣М',
          address: process.env.SMTP_USER
        },
        to: to,
        subject: 'ЁЯФР р╕гр╕лр╕▒р╕к OTP р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ - TedInEasy',
        html: createEmailTemplate(otpCode),
        text: `
TedInEasy - р╕гр╕лр╕▒р╕к OTP р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ

р╕гр╕лр╕▒р╕к OTP р╕Вр╕нр╕Зр╕Др╕╕р╕Ур╕Др╕╖р╕н: ${otpCode}

р╕гр╕лр╕▒р╕кр╕Щр╕╡р╣Йр╕Ир╕░р╕лр╕бр╕Фр╕нр╕▓р╕вр╕╕р╣Гр╕Щр╣Ар╕зр╕ер╕▓ 5 р╕Щр╕▓р╕Чр╕╡

р╣Ар╕Юр╕╖р╣Ир╕нр╕Др╕зр╕▓р╕бр╕Ыр╕ер╕нр╕Фр╕ар╕▒р╕в:
- р╣Др╕бр╣Ир╕Др╕зр╕гр╣Бр╕Кр╕гр╣Мр╕гр╕лр╕▒р╕кр╕Щр╕╡р╣Йр╕Бр╕▒р╕Ър╕Ьр╕╣р╣Йр╕нр╕╖р╣Ир╕Щ
- р╕лр╕▓р╕Бр╕Др╕╕р╕Ур╣Др╕бр╣Ир╣Др╕Фр╣Йр╕Чр╕│р╕Бр╕▓р╕гр╕Вр╕нр╕гр╕╡р╣Ар╕Лр╣Зр╕Хр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕┤р╕Фр╕Хр╣Ир╕нр╕Чр╕╡р╕бр╕Зр╕▓р╕Щр╕Чр╕▒р╕Щр╕Чр╕╡
- р╕гр╕лр╕▒р╕кр╕Щр╕╡р╣Йр╕кр╕▓р╕бр╕▓р╕гр╕Цр╣Гр╕Кр╣Йр╣Др╕Фр╣Йр╣Ар╕Юр╕╡р╕вр╕Зр╕Др╕гр╕▒р╣Йр╕Зр╣Ар╕Фр╕╡р╕вр╕з

┬й 2025 TedInEasy
        `
      }

      const info = await transporter.sendMail(mailOptions)
      console.log('тЬЕ р╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е OTP р╕Ьр╣Ир╕▓р╕Щ Gmail SMTP р╕кр╕│р╣Ар╕гр╣Зр╕И:', info.messageId)
      return { 
        success: true, 
        provider: 'gmail-smtp'
      }
    } catch (error) {
      console.error('тЭМ Gmail SMTP Error:', error)
      console.log('тЪая╕П Gmail SMTP р╕кр╣Ир╕Зр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И, р╕Бр╕│р╕ер╕▒р╕Зр╕ер╕нр╕З Resend...')
    }
  }

  // р╕ер╕│р╕Фр╕▒р╕Ър╕Чр╕╡р╣И 2: Fallback р╣Др╕Ыр╕вр╕▒р╕З Resend (р╣Ар╕Йр╕Юр╕▓р╕░р╕нр╕╡р╣Ар╕бр╕ер╣Ар╕Ир╣Йр╕▓р╕Вр╕нр╕Зр╕Ър╕▒р╕Нр╕Кр╕╡)
  if (process.env.RESEND_API_KEY && to.toLowerCase() === 'asngiun@gmail.com') {
    console.log('ЁЯЪА р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е OTP р╕Ьр╣Ир╕▓р╕Щ Resend (fallback)...')
    const result = await sendResendOTP({ to, otpCode })
    
    if (result.success) {
      console.log('тЬЕ р╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕е OTP р╕Ьр╣Ир╕▓р╕Щ Resend р╕кр╕│р╣Ар╕гр╣Зр╕И')
      return { 
        success: true, 
        provider: 'resend'
      }
    } else {
      console.error('тЪая╕П Resend р╕кр╣Ир╕Зр╣Др╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И:', result.error)
    }
  }

  // р╕ер╕│р╕Фр╕▒р╕Ър╕Чр╕╡р╣И 3: Debug Mode (р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ)
  console.log(`ЁЯФР Debug Mode - OTP р╕кр╕│р╕лр╕гр╕▒р╕Ъ ${to}: ${otpCode}`)
  console.log(`тЬЕ р╕кр╣Ир╕З OTP р╕кр╕│р╣Ар╕гр╣Зр╕Ир╕Ьр╣Ир╕▓р╕Щ debug`)
  
  return { 
    success: true, 
    error: 'р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╣Ир╕Зр╕нр╕╡р╣Ар╕бр╕ер╣Др╕Фр╣Й р╣Бр╕Хр╣И OTP р╣Бр╕кр╕Фр╕Зр╣Гр╕Щ console р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ',
    provider: 'debug' 
  }
}

// р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н SMTP
export const testEmailConnection = async (config?: EmailConfig): Promise<boolean> => {
  try {
    const transporter = createEmailTransporter(config)
    await transporter.verify()
    console.log('тЬЕ р╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н SMTP р╕кр╕│р╣Ар╕гр╣Зр╕И')
    return true
  } catch (error: any) {
    console.error('тЭМ р╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕н SMTP р╕ер╣Йр╕бр╣Ар╕лр╕ер╕з:', error.message)
    return false
  }
}
