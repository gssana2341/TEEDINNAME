// ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Agent Registration
// ‡πÉ‡∏ä‡πâ‡∏£‡∏±‡∏ô‡∏ú‡πà‡∏≤‡∏ô Node.js ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");

// Read environment variables from .env.local
function loadEnvFile() {
  try {
    const envFile = fs.readFileSync(".env.local", "utf8");
    const envVars = {};
    envFile.split("\n").forEach(line => {
      if (line.trim() && !line.startsWith("#")) {
        const [key, ...valueParts] = line.split("=");
        envVars[key.trim()] = valueParts.join("=").trim();
      }
    });
    return envVars;
  } catch (error) {
    console.error("Error reading .env.local:", error.message);
    return {};
  }
}

async function testAgentSystemFixes() {
  console.log("üîß Testing Agent System Fixes...\n");

  // Load environment variables
  const envVars = loadEnvFile();
  const supabaseUrl = envVars.NEXT_PUBLIC_SUPABASE_URL;
  const serviceRoleKey = envVars.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !serviceRoleKey) {
    console.error("‚ùå Missing environment variables");
    console.log("Required: NEXT_PUBLIC_SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY");
    return;
  }

  // Create admin client
  const supabase = createClient(supabaseUrl, serviceRoleKey, {
    auth: {
      autoRefreshToken: false,
      persistSession: false
    }
  });

  try {
    console.log("1. üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Storage Bucket 'agent-documents'");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö bucket ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const { data: buckets, error: bucketsError } = await supabase.storage.listBuckets();
    
    if (bucketsError) {
      console.error("‚ùå Error listing buckets:", bucketsError.message);
      return;
    }
    
    const agentDocsBucket = buckets.find(bucket => bucket.id === 'agent-documents');
    
    if (!agentDocsBucket) {
      console.log("‚ö†Ô∏è Bucket 'agent-documents' ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà");
      console.log("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô SQL script: setup-storage.sql ‡πÉ‡∏ô Supabase Dashboard");
    } else {
      console.log("‚úÖ Bucket 'agent-documents' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    }

    console.log("\n2. üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table 'agens'");
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö table agens
    const { data: agensData, error: agensError } = await supabase
      .from('agens')
      .select('*')
      .limit(1);
    
    if (agensError) {
      console.error("‚ùå Table 'agens' ‡πÑ‡∏°‡πà‡∏û‡∏ö:", agensError.message);
      console.log("üìù ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô SQL script: create-agent-system.sql ‡πÉ‡∏ô Supabase Dashboard");
    } else {
      console.log("‚úÖ Table 'agens' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
    }

    console.log("\n3. üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô agent");
    
    const { data: agentUsers, error: agentUsersError } = await supabase
      .from('users')
      .select('id, email, role')
      .eq('role', 'agent');
    
    if (agentUsersError) {
      console.error("‚ùå Error querying users:", agentUsersError.message);
    } else {
      console.log(`‚úÖ ‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô agent ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${agentUsers.length} ‡∏Ñ‡∏ô`);
      
      if (agentUsers.length > 0) {
        console.log("üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ agents:");
        agentUsers.forEach(user => {
          console.log(`   - ${user.email} (ID: ${user.id})`);
        });
      }
    }

    console.log("\n4. ‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:");
    console.log("   - ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF: ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ bucket 'agent-documents'");
    console.log("   - ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï role: ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏à‡∏≤‡∏Å 'customer' ‡πÄ‡∏õ‡πá‡∏ô 'agent'");
    console.log("   - ‡∏õ‡∏∏‡πà‡∏° Agent: ‡∏à‡∏∞‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠ userRole === 'agent'");
    console.log("   - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï context ‡∏´‡∏•‡∏±‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:", error.message);
  }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
testAgentSystemFixes();
