const { createClient } = require('@supabase/supabase-js')

// ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå environment
const supabaseUrl = 'https://kxkryylxfkkjgbgtxfog.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt4a3J5eWx4ZmtramdiZ3R4Zm9nIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0NjgwMDU4MywiZXhwIjoyMDYyMzc2NTgzfQ.6Jq5oyxsaw9wN3Z79PUazCxHefbdzkBmJpjtbLq2HAg'

const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

// ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ user
const knownPasswords = {
  'xateee@gmail.com': 'awdawdasd1',
  'bkknm121@gmail.com': 'awdawdasd1',
  '9methas@gmail.com': 'methas2448',
  'methasphoynxk@gmail.com': 'Methas2448',
  'gassana2341@gmail.com': 'admin123',
  'zoomgamer807@gmail.com': 'zoomgik2341',
  'xateeeiun@gmail.com': 'awdawdasd1',
  'asngiun@gmail.com': 'awdasdasd1',
  'methas2448@gmail.com': 'methas2448',
  'zoom2564@gmail.com': '12341234',
  // test accounts - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
  'test@example.com': 'password12345',
  'premium@example.com': 'password54321'
}

async function autoFixAllPasswordMismatches() {
  console.log('ü§ñ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥\n')
  console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç password mismatches ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n')

  let fixedCount = 0
  let errorCount = 0
  let skippedCount = 0

  for (const [email, correctPassword] of Object.entries(knownPasswords)) {
    console.log(`\nüìß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: ${email}`)
    
    try {
      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å users table
      const { data: userData, error: userError } = await supabaseAdmin
        .from('users')
        .select('*')
        .eq('email', email)
        .single()

      if (userError) {
        if (userError.code === 'PGRST116') {
          console.log('   ‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ô users table - ‡∏Ç‡πâ‡∏≤‡∏°')
          skippedCount++
          continue
        } else {
          console.log(`   ‚ùå Error: ${userError.message}`)
          errorCount++
          continue
        }
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô database ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (userData.password === correctPassword) {
        console.log(`   ‚úÖ ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß: ${userData.password}`)
        continue
      }

      // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö login ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
      const { error: testError } = await supabaseAdmin.auth.signInWithPassword({
        email: email,
        password: correctPassword
      })

      if (testError) {
        console.log(`   ‚ùå Login test failed: ${testError.message}`)
        errorCount++
        continue
      }

      // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await supabaseAdmin.auth.signOut()

      // 4. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô database
      console.log(`   üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: "${userData.password}" ‚Üí "${correctPassword}"`)
      
      const { error: updateError } = await supabaseAdmin
        .from('users')
        .update({ 
          password: correctPassword,
          updated_at: new Date().toISOString()
        })
        .eq('email', email)

      if (updateError) {
        console.log(`   ‚ùå Update failed: ${updateError.message}`)
        errorCount++
      } else {
        console.log(`   ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`)
        fixedCount++
      }

    } catch (error) {
      console.log(`   ‚ùå Unexpected error: ${error.message}`)
      errorCount++
    }
  }

  // ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
  console.log('\n' + '='.repeat(50))
  console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:')
  console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${fixedCount} users`)
  console.log(`‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≤‡∏°: ${skippedCount} users`)
  console.log(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${errorCount} users`)
  console.log(`üìß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${Object.keys(knownPasswords).length} users`)

  if (fixedCount > 0) {
    console.log('\nüéâ ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!')
    console.log('üí° ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô database ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡πâ‡∏ß')
  } else {
    console.log('\n‚úÖ ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç')
  }
}

// ‡∏£‡∏±‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
autoFixAllPasswordMismatches()
